name: Local Weather App Deployment

on:
  # push:
  #   branches: ["Development"]
  workflow_dispatch:

jobs:
  # Step 1: Gitleaks Scan
  scan:
    name: gitleaks scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Step 2: Test .NET Application
  test:
    name: Test App
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Restore dependencies
        run: dotnet restore LocalWeatherApp/LocalWeatherApp.csproj
      - name: Build
        run: dotnet build --no-restore LocalWeatherApp/LocalWeatherApp.csproj
      - name: Run Tests
        run: dotnet test --no-build --verbosity normal LocalWeatherApp/LocalWeatherApp.csproj

  # Step 3: SonarQube Analysis
  sonarqube:
    name: SonarQube Analysis
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Install SonarCloud scanners
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin /k:"localweatherapp" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml"
          dotnet build
          dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # Step 4: SonarQube Quality Gate
  qualitygate:
    name: SonarQube Quality Gate
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install jq -y
      - name: Check SonarQube Scan Status
        run: |
          response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" -X GET "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=localweatherapp")
          status=$(echo "$response" | jq -r '.projectStatus.status')

          echo "SonarQube Scan Status: $status"

          if [ "$status" == "OK" ]; then
            echo "SonarQube Scan passed!"
            exit 0
          else
            echo "SonarQube Scan failed!"
            exit 1
          fi

  # Step 5: Build and Push Docker Image
  docker:
    name: Docker Build
    needs: qualitygate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Docker Image
        run: docker build -t youssofkhawaja/localweatherapp:latest -f LocalWeatherApp/Dockerfile .
      - name: Save Docker Image
        run: docker save -o localweatherapp.tar youssofkhawaja/localweatherapp
      - name: Save Docker Image as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: localweatherapp
          path: localweatherapp.tar

  # Step 6: Trivy Vulnerability Scan
  trivy:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: localweatherapp
          path: .
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: localweatherapp.tar
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

  # Step 7: Push Docker Image to Remote Server
  docker-push:
    name: Docker Push to Server and Run
    needs: trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: localweatherapp
          path: .
      - name: Load Docker Image
        run: docker load -i localweatherapp.tar
      - name: Copy Tar via SSH
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          port: 22
          source: "localweatherapp.tar"
          target: "/home/ubuntu/images"
      - name: Execute SSH Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          script: |
            docker load -i /home/ubuntu/images/localweatherapp.tar
            rm /home/ubuntu/images/localweatherapp.tar
            docker kill localweatherapp
            docker system prune -f
            docker run --name localweatherapp -p 24117:80 --restart always -d youssofkhawaja/localweatherapp:latest

  # Step 7: ZAP Scan
  zap_scan:
    name: Scan the webapplication
    needs: docker-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://${{ secrets.REMOTE_HOST }}:24117'
          allow_issue_writing: false

  # Step 8: Delete
  Delete:
    name: delete artifact
    needs: [docker, docker-push, trivy]
    runs-on: ubuntu-latest
    steps:
       - uses: geekyeggo/delete-artifact@v4
         with:
              name: |
                  localweatherapp
